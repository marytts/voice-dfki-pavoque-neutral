buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.0'
    id 'de.undercouch.download' version '3.1.0'
}

group 'de.dfki.mary'
version '5.2'

voice {
    name = 'dfki-pavoque-neutral'
    language = 'de'
    gender = 'male'
    type = 'unit selection'
    description = 'A male German unit selection voice'
    license {
        name = 'Creative Commons Attribution-NoDerivs 3.0 Unported'
        shortName = 'CC-BY-ND'
        url = 'http://mary.dfki.de/download/by-nd-3.0.html'
    }
    samplingRate = 16000
}

ext {
    flacFile = file("$buildDir/pavoque-neutral.flac")
    yamlFile = file("$buildDir/pavoque-neutral.yaml")
}

import de.undercouch.gradle.tasks.download.Download
import org.yaml.snakeyaml.Yaml

task downloadAudio(type: Download) {
    src "https://github.com/marytts/pavoque-data/releases/download/v0.2/$flacFile.name"
    dest flacFile
    overwrite false
    acceptAnyCertificate true
}

task downloadData(type: Download) {
    src "https://github.com/marytts/pavoque-data/releases/download/v0.2/$yamlFile.name"
    dest yamlFile
    overwrite false
    acceptAnyCertificate true
}

task extractLab {
    dependsOn downloadData
    def destDir = file("$buildDir/lab")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        def mapping = ['H#': '_']
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.lab").withWriter { writer ->
                    writer.println '#'
                    utterance.segments.each { segment ->
                        writer.println "$segment.end 125 ${mapping[segment.lab] ?: segment.lab}"
                    }
                }
            }
        }
    }
}

task extractText {
    dependsOn downloadData
    def destDir = file("$buildDir/text")
    inputs.file yamlFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                file("$destDir/${utterance.prompt}.txt").withWriter { writer ->
                    writer.println utterance.text
                }
            }
        }
    }
}

task extractWav {
    dependsOn downloadData, downloadAudio
    ext.destDir = file("$buildDir/wav")
    inputs.files yamlFile, flacFile
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        new Yaml().load(yamlFile.newReader()).each { utterance ->
            if (utterance.segments) {
                exec {
                    commandLine 'sox', flacFile, "$destDir/${utterance.prompt}.wav",
                            'trim', utterance.start, "=$utterance.end",
                            'rate', voice.samplingRate
                }
            }
        }
    }
}

legacyInit {
    dependsOn extractLab, extractText, extractWav
    def basenameListFile = file("$buildDir/basenames.lst")
    outputs.files basenameListFile
    doLast {
        basenameListFile.withWriter { basenameList ->
            fileTree(wav.destDir).collect {
                it.name - '.wav'
            }.minus([
                    'a0181',
                    'a0215',
                    'a0225',
                    'a0385',
                    'a0401',
                    'a0425',
                    'a0544',
                    'a0718',
                    'a0923',
                    'a1095',
                    'a1332',
                    'a1590',
                    'e0078',
                    'e0101',
                    'e0197',
                    'e0268',
                    'e0529',
                    'e0569',
                    'e0795',
                    'e0858',
                    'e0928',
                    'e0959',
                    'e0966',
                    'e1094',
                    'e1113',
                    'e1137',
                    'e1149',
                    'e1175',
                    'e1269',
                    'e1282',
                    'e1301'
            ]).each {
                basenameList.writeLine it
            }
        }
    }
}
